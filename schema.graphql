type User @model {
  id: ID!
  userId: String
  name: String
  email: String
  usageLogs: [UsageLog] @relationship(fields: ["id"], references: ["userId"]) # Explicitly define the relationship
  utilities: [Utility] @relationship(fields: ["id"], references: ["userId"])
  deviceProfiles: [DeviceProfile] @relationship(fields: ["id"], references: ["userId"])
  aiFeedback: [AiFeedback] @relationship(fields: ["id"], references: ["userId"])
}

type UsageLog @model {
  id: ID!
  timestamp: String
  deviceId: String
  userId: String! # Make this non-nullable to enforce the relationship
  usageKwh: Float
}

type Utility @model {
  id: ID!
  providerName: String
  accountNumber: String
  userId: String!
}

type DeviceProfile @model {
  id: ID!
  deviceName: String
  category: String
  wattage: Int
  userId: String!
}

type AiFeedback @model {
  id: ID!
  feedbackText: String
  rating: Int
  userId: String!
  suggestionId: String
}

type EnergyEducation @model {
  id: ID!
  topic: String
  contentUrl: String
  difficulty: String
}

# --- Optional: Define specific Queries/Mutations if needed ---
type Query {
  findUsersByName(name: String!): [User] # Example with non-nullable argument
}

type Mutation {
  updateUserEmail(id: ID!, newEmail: String!): User # Example with non-nullable arguments
}
